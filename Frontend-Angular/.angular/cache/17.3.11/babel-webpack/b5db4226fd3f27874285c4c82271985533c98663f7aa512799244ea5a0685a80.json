{"ast":null,"code":"import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport { SessionStorageService } from 'ngx-webstorage';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-webstorage\";\nimport * as i2 from \"@angular/common/http\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    constructor(storage, http) {\n      this.storage = storage;\n      this.http = http;\n    }\n    handleError(error) {\n      console.error('An error occurred:', error);\n      return throwError(() => new Error('Something went wrong. Please try again later.'));\n    }\n    getHeaders() {\n      return new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${this.getToken()}`\n      });\n    }\n    register(user) {\n      return this.http.post(`${environment.baseUrl}${environment.signupUrl}`, JSON.stringify(user), {\n        headers: this.getHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    login(user) {\n      return this.http.post(`${environment.baseUrl}${environment.loginUrl}`, JSON.stringify(user), {\n        headers: this.getHeaders(),\n        withCredentials: true // This is important for sending cookies\n      }).pipe(catchError(this.handleError));\n    }\n    logout() {\n      return this.http.get(`${environment.baseUrl}${environment.logoutUrl}`, {\n        headers: this.getHeaders()\n      }).pipe(map(() => this.removeToken()), catchError(this.handleError));\n    }\n    addToCart(product) {\n      const params = new HttpParams().set('productId', product.productid.toString());\n      return this.http.get(`${environment.baseUrl}${environment.addToCartUrl}`, {\n        headers: this.getHeaders(),\n        params\n      }).pipe(catchError(this.handleError));\n    }\n    getCartItems() {\n      return this.http.get(`${environment.baseUrl}${environment.viewCartUrl}`, {\n        headers: this.getHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    updateCartItem(prodid, quant) {\n      const body = {\n        id: prodid,\n        quantity: quant\n      };\n      return this.http.put(`${environment.baseUrl}${environment.updateCartUrl}`, body, {\n        headers: this.getHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    deleteCartItem(bufdid) {\n      const params = new HttpParams().set('bufcartid', bufdid.toString());\n      return this.http.delete(`${environment.baseUrl}${environment.deleteCartUrl}`, {\n        headers: this.getHeaders(),\n        params\n      }).pipe(catchError(this.handleError));\n    }\n    addOrUpdateAddress(adr) {\n      return this.http.post(`${environment.baseUrl}${environment.addAddressUrl}`, adr, {\n        headers: this.getHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    getAddress() {\n      return this.http.get(`${environment.baseUrl}${environment.viewAddressUrl}`, {\n        headers: this.getHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    getProducts() {\n      return this.http.get(`${environment.baseUrl}${environment.productsUrl}`, {\n        headers: this.getHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    addProduct(desc, quan, price, prodname, image) {\n      const formData = new FormData();\n      formData.append(\"description\", desc);\n      formData.append(\"price\", price);\n      formData.append(\"productname\", prodname);\n      formData.append(\"quantity\", quan);\n      formData.append(\"file\", image);\n      return this.http.post(`${environment.baseUrl}${environment.addProductUrl}`, formData, {\n        headers: this.getHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    updateProduct(desc, quan, price, prodname, image, productid) {\n      const formData = new FormData();\n      formData.append(\"description\", desc);\n      formData.append(\"price\", price);\n      formData.append(\"productname\", prodname);\n      formData.append(\"quantity\", quan);\n      formData.append(\"file\", image);\n      formData.append(\"productId\", productid);\n      return this.http.put(`${environment.baseUrl}${environment.updateProductUrl}`, formData, {\n        headers: this.getHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    deleteProduct(prodid) {\n      const params = new HttpParams().set('productId', prodid.toString());\n      return this.http.delete(`${environment.baseUrl}${environment.deleteProductUrl}`, {\n        headers: this.getHeaders(),\n        params\n      }).pipe(catchError(this.handleError));\n    }\n    getOrders() {\n      return this.http.get(`${environment.baseUrl}${environment.viewOrderUrl}`, {\n        headers: this.getHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    placeOrder() {\n      return this.http.get(`${environment.baseUrl}${environment.placeOrderUrl}`, {\n        headers: this.getHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    updateStatusForOrder(order) {\n      const formData = new FormData();\n      formData.append(\"orderId\", order.orderId);\n      formData.append(\"orderStatus\", order.orderStatus);\n      return this.http.post(`${environment.baseUrl}${environment.updateOrderUrl}`, formData, {\n        headers: this.getHeaders()\n      }).pipe(catchError(this.handleError));\n    }\n    isAuthenticated() {\n      //return this.getToken() !== null;\n    }\n    storeToken(token, auth_type) {\n      // Store token securely\n      document.cookie = `auth_token=${token}; path=/; HttpOnly; Secure; SameSite=Strict`;\n      // Store user type in session storage for client-side access\n      this.storage.store(\"auth_type\", auth_type);\n    }\n    getAuthType() {\n      return this.storage.retrieve(\"auth_type\");\n    }\n    getToken() {\n      const match = document.cookie.match(new RegExp('(^| )auth_token=([^;]+)'));\n      return match ? match[2] : null; // Return token from cookie\n    }\n    removeToken() {\n      document.cookie = \"auth_token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;\";\n      // Clear user type in session storage\n      this.storage.clear(\"auth_type\");\n    }\n    verifyMfa(mfaCode) {\n      // Implement MFA verification logic here\n      return this.http.post(`${environment.baseUrl}/verify-mfa`, {\n        mfaCode\n      });\n    }\n    static {\n      this.ɵfac = function ApiService_Factory(t) {\n        return new (t || ApiService)(i0.ɵɵinject(i1.SessionStorageService), i0.ɵɵinject(i2.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: ApiService,\n        factory: ApiService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}