{"ast":null,"code":"import { FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { ApiService } from 'src/app/Service/api.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/Service/api.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"ng-recaptcha\";\nfunction LoginComponent_div_8_small_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \"Email is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_8_small_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \"Invalid email format.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtemplate(1, LoginComponent_div_8_small_1_Template, 2, 0, \"small\", 16)(2, LoginComponent_div_8_small_2_Template, 2, 0, \"small\", 16);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    let tmp_1_0;\n    let tmp_2_0;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx_r0.loginForm.get(\"email\").errors) == null ? null : tmp_1_0.required);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", (tmp_2_0 = ctx_r0.loginForm.get(\"email\").errors) == null ? null : tmp_2_0.email);\n  }\n}\nfunction LoginComponent_div_11_small_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \"Password is required.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_11_small_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \"Password must be at least 8 characters long.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_11_small_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\");\n    i0.ɵɵtext(1, \"Password must contain at least one uppercase letter, one lowercase letter, one number, and one special character.\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵtemplate(1, LoginComponent_div_11_small_1_Template, 2, 0, \"small\", 16)(2, LoginComponent_div_11_small_2_Template, 2, 0, \"small\", 16)(3, LoginComponent_div_11_small_3_Template, 2, 0, \"small\", 16);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    let tmp_1_0;\n    let tmp_2_0;\n    let tmp_3_0;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", (tmp_1_0 = ctx_r0.loginForm.get(\"password\").errors) == null ? null : tmp_1_0.required);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", (tmp_2_0 = ctx_r0.loginForm.get(\"password\").errors) == null ? null : tmp_2_0.minlength);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", (tmp_3_0 = ctx_r0.loginForm.get(\"password\").errors) == null ? null : tmp_3_0.pattern);\n  }\n}\nfunction LoginComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 6)(1, \"input\", 17);\n    i0.ɵɵtwoWayListener(\"ngModelChange\", function LoginComponent_div_12_Template_input_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r0 = i0.ɵɵnextContext();\n      i0.ɵɵtwoWayBindingSet(ctx_r0.mfaCode, $event) || (ctx_r0.mfaCode = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"button\", 18);\n    i0.ɵɵlistener(\"click\", function LoginComponent_div_12_Template_button_click_2_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r0 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r0.verifyMfa());\n    });\n    i0.ɵɵtext(3, \"Verify MFA\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtwoWayProperty(\"ngModel\", ctx_r0.mfaCode);\n  }\n}\nfunction LoginComponent_div_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.errorMessage, \" \");\n  }\n}\nexport let LoginComponent = /*#__PURE__*/(() => {\n  class LoginComponent {\n    constructor(formBuilder, apiService, router) {\n      this.formBuilder = formBuilder;\n      this.apiService = apiService;\n      this.router = router;\n      this.error = false;\n      this.errorMessage = '';\n      this.loginAttempts = 0;\n      this.lastLoginAttempt = 0;\n      this.showMfaInput = false; // For MFA input if required\n      this.mfaCode = ''; // Variable to hold MFA code\n      this.captchaToken = ''; // Variable to hold reCAPTCHA token\n      this.loginForm = this.formBuilder.group({\n        email: ['', [Validators.required, Validators.email]],\n        password: ['', [Validators.required, Validators.minLength(8), Validators.pattern(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/)]]\n      });\n    }\n    ngOnInit() {\n      //this.setContentSecurityPolicy();\n      //this.enforceTLS();\n    }\n    login() {\n      if (this.isRateLimited()) return;\n      if (this.loginForm.valid && this.captchaToken) {\n        this.loginAttempts++;\n        this.apiService.login({\n          ...this.loginForm.value,\n          captchaToken: this.captchaToken\n        }).subscribe(res => {\n          if (res.status === 200) {\n            if (res.mfaRequired) {\n              this.showMfaInput = true; // Show MFA input if required\n            } else {\n              this.handleSuccessfulLogin(res);\n            }\n          } else {\n            this.handleFailedLogin();\n          }\n        }, err => this.handleLoginError(err));\n      } else {\n        this.error = true;\n        this.errorMessage = 'Please enter valid credentials and complete the CAPTCHA.';\n      }\n    }\n    verifyMfa() {\n      this.apiService.verifyMfa(this.mfaCode).subscribe(res => {\n        if (res.status === 200) {\n          this.handleSuccessfulLogin(res);\n        } else {\n          this.error = true;\n          this.errorMessage = 'Invalid MFA code. Please try again.';\n        }\n      }, err => this.handleLoginError(err));\n    }\n    handleSuccessfulLogin(res) {\n      this.apiService.storeToken(res.authToken, res.userType);\n      this.router.navigate([res.userType === 'ADMIN' ? '/admin' : '/home']);\n    }\n    handleFailedLogin() {\n      this.error = true;\n      this.errorMessage = 'Invalid credentials. Please try again.';\n      // Implement account lockout logic here if needed\n      if (this.loginAttempts >= 5) {\n        // Lock account logic here\n      }\n    }\n    handleLoginError(err) {\n      console.error('Login error:', err);\n      this.error = true;\n      this.errorMessage = \"An error occurred. Please try again later.\";\n    }\n    isRateLimited() {\n      const now = Date.now();\n      if (now - this.lastLoginAttempt < 2000) {\n        this.errorMessage = \"Please wait before attempting to log in again.\";\n        return true;\n      }\n      this.lastLoginAttempt = now;\n      return false;\n    }\n    setContentSecurityPolicy() {\n      const meta = document.createElement('meta');\n      meta.httpEquiv = \"Content-Security-Policy\";\n      meta.content = \"default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' https://fonts.googleapis.com;\";\n      document.getElementsByTagName('head')[0].appendChild(meta);\n    }\n    enforceTLS() {\n      if (window.location.protocol !== \"https\") {\n        window.location.href = \"https:\" + window.location.href.substring(window.location.protocol.length);\n      }\n    }\n    captchaResolved(captchaResponse) {\n      this.captchaToken = captchaResponse; // Store the reCAPTCHA token\n    }\n    static {\n      this.ɵfac = function LoginComponent_Factory(t) {\n        return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ApiService), i0.ɵɵdirectiveInject(i3.Router));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: LoginComponent,\n        selectors: [[\"app-login\"]],\n        decls: 18,\n        vars: 6,\n        consts: [[1, \"container\"], [1, \"row\"], [1, \"col-md-6\", \"offset-md-3\"], [1, \"card\", \"login\", \"shadow\", \"p-3\", \"mb-5\", \"bg-white\", \"rounded\"], [1, \"card-body\"], [3, \"ngSubmit\", \"formGroup\"], [1, \"form-group\"], [\"type\", \"email\", \"formControlName\", \"email\", \"placeholder\", \"Email\", \"required\", \"\", 1, \"form-control\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"type\", \"password\", \"formControlName\", \"password\", \"placeholder\", \"Password\", \"required\", \"\", 1, \"form-control\"], [\"class\", \"form-group\", 4, \"ngIf\"], [1, \"captcha-container\"], [\"siteKey\", \"YOUR_RECAPTCHA_SITE_KEY\", 3, \"resolved\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", \"btn-block\", 3, \"disabled\"], [\"class\", \"alert alert-danger mt-3\", 4, \"ngIf\"], [1, \"text-danger\"], [4, \"ngIf\"], [\"type\", \"text\", \"placeholder\", \"Enter MFA Code\", 1, \"form-control\", 3, \"ngModelChange\", \"ngModel\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"click\"], [1, \"alert\", \"alert-danger\", \"mt-3\"]],\n        template: function LoginComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"form\", 5);\n            i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_5_listener() {\n              return ctx.login();\n            });\n            i0.ɵɵelementStart(6, \"div\", 6);\n            i0.ɵɵelement(7, \"input\", 7);\n            i0.ɵɵtemplate(8, LoginComponent_div_8_Template, 3, 2, \"div\", 8);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(9, \"div\", 6);\n            i0.ɵɵelement(10, \"input\", 9);\n            i0.ɵɵtemplate(11, LoginComponent_div_11_Template, 4, 3, \"div\", 8);\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(12, LoginComponent_div_12_Template, 4, 1, \"div\", 10);\n            i0.ɵɵelementStart(13, \"div\", 11)(14, \"re-captcha\", 12);\n            i0.ɵɵlistener(\"resolved\", function LoginComponent_Template_re_captcha_resolved_14_listener($event) {\n              return ctx.captchaResolved($event);\n            });\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(15, \"button\", 13);\n            i0.ɵɵtext(16, \"Login\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵtemplate(17, LoginComponent_div_17_Template, 2, 1, \"div\", 14);\n            i0.ɵɵelementEnd()()()()();\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(5);\n            i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"ngIf\", ctx.loginForm.get(\"email\").invalid && (ctx.loginForm.get(\"email\").dirty || ctx.loginForm.get(\"email\").touched));\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"ngIf\", ctx.loginForm.get(\"password\").invalid && (ctx.loginForm.get(\"password\").dirty || ctx.loginForm.get(\"password\").touched));\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", ctx.showMfaInput);\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"disabled\", ctx.loginForm.invalid || !ctx.captchaToken);\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngIf\", ctx.error);\n          }\n        },\n        dependencies: [i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.NgModel, i1.FormGroupDirective, i1.FormControlName, i5.RecaptchaComponent],\n        styles: [\".login[_ngcontent-%COMP%]{background-image:url(/assets/img/login.png)}.card[_ngcontent-%COMP%]{height:200px}.row[_ngcontent-%COMP%]{margin-top:15px}\"]\n      });\n    }\n  }\n  return LoginComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}