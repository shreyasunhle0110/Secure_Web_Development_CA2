{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { SESSION_STORAGE, StorageService } from 'angular-webstorage-service';\nimport { environment } from 'src/environments/environment';\nimport { catchError } from 'rxjs/operators';\nimport { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ApiService = /*#__PURE__*/(() => {\n  class ApiService {\n    constructor(storage, http) {\n      this.storage = storage;\n      this.http = http;\n    }\n    // Registering new users to the system\n    register(user) {\n      return this.http.post(environment.baseUrl + environment.signupUrl, JSON.stringify(user), {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n    }\n    // validating user credentials\n    login(user) {\n      return this.http.post(environment.baseUrl + environment.loginUrl, JSON.stringify(user), {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n    }\n    logout() {\n      this.http.get(environment.baseUrl + environment.logoutUrl);\n    }\n    // Add Products to the Cart\n    addToCart(product) {\n      return this.http.get(environment.baseUrl + environment.addToCartUrl + \"?productId=\" + product.productid);\n    }\n    // View Cart items\n    getCartItems() {\n      return this.http.get(environment.baseUrl + environment.viewCartUrl);\n    }\n    // update items quantity in the cart\n    updateCartItem(prodid, quant) {\n      var map = {\n        \"id\": prodid,\n        \"quantity\": quant\n      };\n      return this.http.put(environment.baseUrl + environment.updateCartUrl, map);\n    }\n    // delete cart Item \n    deleteCartItem(bufdid) {\n      return this.http.delete(environment.baseUrl + environment.deleteCartUrl + \"?bufcartid=\" + bufdid);\n    }\n    // update Address \n    addOrUpdateAddress(adr) {\n      return this.http.post(environment.baseUrl + environment.addAddressUrl, adr);\n    }\n    // fetch address \n    getAddress() {\n      return this.http.get(environment.baseUrl + environment.viewAddressUrl);\n    }\n    // Fetching all the products\n    getProducts() {\n      return this.http.get(environment.baseUrl + environment.productsUrl).pipe(catchError(error => {\n        console.error('Error fetching products:', error);\n        return throwError(error);\n      }));\n    }\n    // Add product in the system\n    addProduct(desc, quan, price, prodname, image) {\n      const formData = new FormData();\n      formData.append(\"description\", desc);\n      formData.append(\"price\", price);\n      formData.append(\"productname\", prodname);\n      formData.append(\"quantity\", quan);\n      formData.append(\"file\", image);\n      return this.http.post(environment.baseUrl + environment.addProductUrl, formData);\n    }\n    // update Product for Logged Admin User\n    updateProduct(desc, quan, price, prodname, image, productid) {\n      const formData = new FormData();\n      formData.append(\"description\", desc);\n      formData.append(\"price\", price);\n      formData.append(\"productname\", prodname);\n      formData.append(\"quantity\", quan);\n      formData.append(\"file\", image);\n      formData.append(\"productId\", productid);\n      return this.http.put(environment.baseUrl + environment.updateProductUrl, formData);\n    }\n    // delete Product\n    deleteProduct(prodid) {\n      return this.http.delete(environment.baseUrl + environment.deleteProductUrl + \"?productId=\" + prodid);\n    }\n    // fetch available orders placed\n    getOrders() {\n      return this.http.get(environment.baseUrl + environment.viewOrderUrl);\n    }\n    // place the order \n    placeOrder() {\n      return this.http.get(environment.baseUrl + environment.placeOrderUrl);\n    }\n    // update status for order\n    updateStatusForOrder(order) {\n      const formData = new FormData();\n      formData.append(\"orderId\", order.orderId);\n      formData.append(\"orderStatus\", order.orderStatus);\n      return this.http.post(environment.baseUrl + environment.updateOrderUrl, formData);\n    }\n    // Authentication Methods \n    isAuthenticated() {\n      return this.getToken() !== null;\n    }\n    storeToken(token, auth_type) {\n      this.storage.set(\"auth_token\", token);\n      this.storage.set(\"auth_type\", auth_type);\n    }\n    getAuthType() {\n      if (this.storage.get(\"auth_type\") !== null) {\n        return this.storage.get(\"auth_type\");\n      }\n      return null;\n    }\n    getToken() {\n      return this.storage.get(\"auth_token\");\n    }\n    removeToken() {\n      this.storage.remove(\"auth_type\");\n      return this.storage.remove(\"auth_token\");\n    }\n    static {\n      this.ɵfac = function ApiService_Factory(t) {\n        return new (t || ApiService)(i0.ɵɵinject(SESSION_STORAGE), i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: ApiService,\n        factory: ApiService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return ApiService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}